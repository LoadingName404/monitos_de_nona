import mysql.connector

print('Conectando con la base de datos...')

novalido = "La opción ingresada no es válida."

usuario_actual = None

# Conexión a la base de datos
conexion = None
try:
    conexion = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="sivba",
    )
    print('Conexión exitosa')
except:
    print('No se pudo conectar con la base de datos')
    exit()

# Clase Acciones
class Acciones:
    @staticmethod
    def iniciar_sesion():
        global usuario_actual
        i1 = True
        usuario = input("Ingrese el nombre de usuario: ").lower()
        cursor.execute("SELECT * FROM usuario WHERE nombre_usuario = %s", (usuario,))
        resultados = cursor.fetchone()
        if resultados is None:
            print("Usuario no encontrado.")
            return
        while i1:
            contra = input("Ingrese la contraseña: ")
            cursor.execute("SELECT contra FROM usuario WHERE nombre_usuario = %s", (usuario,))
            resultado = cursor.fetchone()
            if resultado is None or contra != resultado[0]:
                print("Contraseña incorrecta.")
                salir = input("¿Intentarlo otra vez? (S/N): ").lower()
                if salir == "n" or salir == "no":
                    i1 = False
                    usuario_actual = None
                    print("Adiós")
                continue
            i1 = False
            usuario_actual = usuario
            cursor.execute("SELECT cargo FROM usuario WHERE nombre_usuario = %s", (usuario,))
            resultado = cursor.fetchone()
            cargo = resultado[0]
            if cargo == 1:
                Menus.menu_jefe()
            elif cargo == 2:
                Menus.menu_vendedor()
            elif cargo == 3:
                Menus.menu_cajero()

    def agregar_producto():
        nombre_producto = input("Ingrese el nombre del producto: ")
        precio_producto = float(input("Ingrese el precio del producto: "))

        cursor.execute(
            "INSERT INTO producto(nombre_producto, precio_producto) "
            "VALUES (%s, %s)",
            (nombre_producto, precio_producto)
        )
        conexion.commit()
        print("Producto agregado exitosamente.")

    @staticmethod
    def obtener_productos():
        cursor.execute("SELECT * FROM producto")
        resultados = cursor.fetchall()
        for resultado in resultados:
            print('Producto N°{}: {}, precio: {}'.format(resultado[0], resultado[1], resultado[2]))

    def actualizar_producto():
        id_producto = input("Ingrese el ID del producto que desea actualizar: ")
        cursor.execute("SELECT * FROM producto WHERE id_producto = %s", (id_producto,))
        producto_existente = cursor.fetchone()

        if producto_existente is None:
            print("El producto con el ID {} no existe.".format(id_producto))
            return

        nombre_producto = input("Ingrese el nuevo nombre del producto: ")
        precio_producto = float(input("Ingrese el nuevo precio del producto: "))

        cursor.execute(
            "UPDATE producto SET nombre_producto = %s, precio_producto = %s WHERE id_producto = %s",
            (nombre_producto, precio_producto, id_producto)
        )
        conexion.commit()
        print("Producto actualizado exitosamente.")        


    def quitar_producto():
        id_producto = input("Ingrese el ID del producto que desea quitar: ")
        cursor.execute("SELECT * FROM producto WHERE id_producto = %s", (id_producto,))
        producto_existente = cursor.fetchone()

        if producto_existente is None:
            print("El producto con el ID {} no existe.".format(id_producto))
            return

        cursor.execute("DELETE FROM carrito WHERE id_producto = %s", (id_producto,))
        conexion.commit()

        cursor.execute("DELETE FROM producto WHERE id_producto = %s", (id_producto,))
        conexion.commit()

    def obtener_ventas():
        cursor.execute("""
            SELECT v.id_venta, v.id_usuario, c.id_producto, v.fecha, v.total_venta
            FROM venta v
            JOIN carrito c ON v.id_venta = c.id_venta
        """)
        
        ventas = cursor.fetchall()
        for venta in ventas:
            print('ID Venta: {}, ID Usuario: {}, ID Producto: {}, Fecha: {}, Valor total venta: {}'.format(
                venta[0], venta[1], venta[2], venta[3], venta[4]))
            
        if not ventas:
            print("No hay ventas registradas.")
            return



    @staticmethod
    def agregar_venta():
        if usuario_actual is None:
            print("No se ha iniciado sesión como vendedor.")
            return

        id_usuario = 2  
        cursor.execute("INSERT INTO venta(id_usuario, fecha, total_venta) VALUES (%s, NOW(), 0.0)", (id_usuario,))
        conexion.commit()
        venta_id = cursor.lastrowid
        print("Usando la venta N°" + str(venta_id))

        productos = []  
        total_venta = 0.0  

        razon_social = '' 
        rut = ''  
        giro = ''  
        direccion = ''  

        i = True
        while i:
            Acciones.obtener_productos()
            print("0.- No más productos (confirmar venta)")
            producto = input("Ingrese el número del producto que desea agregar a la venta: ")
            print("Producto seleccionado: N°{}".format(producto))
            if producto == "0":
                i = False
                break  

            cursor.execute("SELECT id_producto, nombre_producto, precio_producto FROM producto WHERE id_producto = %s", (producto,))
            producto_info = cursor.fetchone()
            if producto_info is None:
                print("El producto con el ID {} no existe.".format(producto))
                continue
            productos.append(producto_info)
            cantidad = int(input("Ingrese la cantidad del producto {}: ".format(producto_info[1])))
            producto_total = producto_info[2] * cantidad
            total_venta += producto_total
            cursor.execute("INSERT INTO carrito(id_producto, id_venta, cantidad, total_producto) VALUES (%s, %s, %s, %s)", (producto, venta_id, cantidad, producto_total))

    
        total_sin_descuento = total_venta

        descuento = float(input("Ingrese el descuento aplicado a la venta (%): "))
        total_descuento = total_sin_descuento * (descuento / 100)

        iva = (total_sin_descuento - total_descuento) * 0.19

        total_final = total_sin_descuento - total_descuento + iva

        tipo_documento = input("Ingrese el tipo de comprobante tributario (boleta/factura): ")
        if tipo_documento.lower() not in ['boleta', 'factura']:
            print("Tipo de comprobante tributario inválido.")
            return

        cursor.execute("UPDATE venta SET total_venta = %s, tipo_documento = %s WHERE id_venta = %s", (total_final, tipo_documento, venta_id))
        conexion.commit()

        cursor.execute("INSERT INTO boleta(id_venta, total_venta) VALUES (%s, %s)", (venta_id, total_final))
        conexion.commit()

        if tipo_documento.lower() == 'boleta':
            print("Detalle de productos:")
            for i, producto_info in enumerate(productos):
                print("Producto: {}, Cantidad: {}, Total Producto: {}".format(producto_info[1], cantidad, producto_total))
            print("Total a pagar: {}".format(total_final))
          
        else:        
            razon_social = input("Ingrese la razón social del cliente: ")
            rut = input("Ingrese el RUT del cliente: ")
            giro = input("Ingrese el giro del cliente: ")
            direccion = input("Ingrese la dirección del cliente: ")
            print("Factura registrada")

        cursor.execute("UPDATE venta SET total_venta = %s WHERE id_venta = %s", (total_final, venta_id))
        conexion.commit()

        cursor.execute(
            "INSERT INTO factura(id_venta, tipo_documento, razon_social, rut, giro, direccion) "
            "VALUES (%s, %s, %s, %s, %s, %s)",
            (venta_id, tipo_documento, razon_social, rut, giro, direccion)
        )
        conexion.commit()


    @staticmethod
    def actualizar_ventas():
        cursor.execute("SELECT venta.id_venta, venta.fecha, GROUP_CONCAT(producto.nombre_producto SEPARATOR ', ') AS productos "
                   "FROM venta "
                   "JOIN carrito ON venta.id_venta = carrito.id_venta "
                   "JOIN producto ON carrito.id_producto = producto.id_producto "
                   "GROUP BY venta.id_venta")
        ventas = cursor.fetchall()

        if not ventas:
            print("No hay ventas registradas.")
            return

        print("Ventas disponibles:")
        for venta in ventas:
            print("ID Venta: {}, Fecha: {}".format(venta[0], venta[1]))
            print("Productos: {}".format(venta[2]))
            print()

        id_venta = input("Ingrese el ID de la venta que desea actualizar: ")
        cursor.execute("SELECT * FROM venta WHERE id_venta = %s", (id_venta,))
        venta_existente = cursor.fetchone()

        if venta_existente is None:
            print("La venta con el ID {} no existe.".format(id_venta))
            return

        cursor.execute("SELECT * FROM carrito WHERE id_venta = %s", (id_venta,))
        productos_venta = cursor.fetchall()

        if not productos_venta:
            print("No hay productos en la venta con ID {}.".format(id_venta))
            return

        print("Productos en la venta:")
        for producto in productos_venta:
            print("ID Producto: {}, Cantidad: {}, Total Producto: {}".format(producto[1], producto[3], producto[4]))

        id_producto_nuevo = input("Ingrese el ID del nuevo producto que desea agregar a la venta: ")

        cursor.execute("SELECT * FROM producto WHERE id_producto = %s", (id_producto_nuevo,))
        producto_nuevo = cursor.fetchone()

        if producto_nuevo is None:
            print("El producto con el ID {} no existe.".format(id_producto_nuevo))
            return

        cursor.execute(
            "UPDATE carrito SET id_producto = %s "
            "WHERE id_venta = %s",
            (id_producto_nuevo, id_venta)
        )
        conexion.commit()

        print("Venta actualizada exitosamente.")

    @staticmethod
    def eliminar_venta():
        cursor.execute("SELECT id_venta, fecha FROM venta")
        ventas = cursor.fetchall()

        if not ventas:
            print("No hay ventas registradas.")
            return

        print("Ventas disponibles:")
        for venta in ventas:
            print("ID Venta: {}, Fecha: {}".format(venta[0], venta[1]))
    
        id_venta = input("Ingrese el ID de la venta que desea eliminar: ")
        cursor.execute("SELECT * FROM venta WHERE id_venta = %s", (id_venta,))
        venta_existente = cursor.fetchone()

        if venta_existente is None:
            print("La venta con el ID {} no existe.".format(id_venta))
            return

        cursor.execute("DELETE FROM factura WHERE id_venta = %s", (id_venta,))
        conexion.commit()

        cursor.execute("DELETE FROM carrito WHERE id_venta = %s", (id_venta,))
        conexion.commit()

        cursor.execute("DELETE FROM venta WHERE id_venta = %s", (id_venta,))
        conexion.commit()

        print("Venta eliminada exitosamente.")


    @staticmethod
    def cerrar_dia_ventas():
        fecha_cierre = input("Ingrese la fecha de cierre del día de ventas (YYYY-MM-DD): ")
        nombre_usuario = input("Ingrese el nombre de usuario que cierra el día de ventas: ")

        cursor.execute("SELECT id_usuario FROM usuario WHERE nombre_usuario = %s", (nombre_usuario,))
        resultado = cursor.fetchone()

        if resultado is None:
            print("El nombre de usuario ingresado no existe.")
            return

        id_usuario = resultado[0]

        cursor.execute("SELECT * FROM informe_ventas WHERE fecha = %s", (fecha_cierre,))
        informe_existente = cursor.fetchone()
        if informe_existente is not None:
            print("El informe de ventas para la fecha {} ya existe.".format(fecha_cierre))
            return

        total_boletas = int(input("Ingrese el total de boletas vendidas: "))
        total_facturas = int(input("Ingrese el total de facturas vendidas: "))
        total_ventas = int(input("Ingrese el total de ventas realizadas: "))
        observacion = input("Ingrese alguna observación adicional: ")

        cursor.execute(
            "INSERT INTO informe_ventas(total_boletas, total_facturas, total_ventas, fecha, observacion, id_usuario) "
            "VALUES (%s, %s, %s, %s, %s, %s)",
            (total_boletas, total_facturas, total_ventas, fecha_cierre, observacion, id_usuario)
        )
        conexion.commit()
        print("Día de ventas cerrado exitosamente.")


    @staticmethod
    def abrir_dia_ventas():
        fecha_apertura = input("Ingrese la fecha de apertura del día de ventas (YYYY-MM-DD): ")
        nombre_usuario = input("Ingrese el nombre de usuario que abre el día de ventas: ")
        cursor.execute("SELECT id_usuario FROM usuario WHERE nombre_usuario = %s", (nombre_usuario,))
        resultado = cursor.fetchone()
        if resultado is None:
            print("El nombre de usuario ingresado no existe.")
            return
        id_usuario = resultado[0]

        cursor.execute("SELECT * FROM caja WHERE fecha_apertura = %s", (fecha_apertura,))
        caja_existente = cursor.fetchone()
        if caja_existente is not None:
            print("La caja para la fecha {} ya está abierta.".format(fecha_apertura))
            return
        monto_inicial = int(input("Ingrese el monto inicial de la caja: "))
        descripcion = input("Ingrese una descripción adicional: ")
        cursor.execute(
            "INSERT INTO caja(fecha_apertura, monto_inicial, descripcion, id_usuario) "
            "VALUES (%s, %s, %s, %s)",
            (fecha_apertura, monto_inicial, descripcion, id_usuario)
        )
        conexion.commit()
        print("Día de ventas abierto exitosamente.")
   

    @staticmethod
    def mostrar_ventas():
        cursor.execute("SELECT id_venta, total_venta FROM venta")
        ventas = cursor.fetchall()
        if not ventas:
            print("No hay ventas registradas.")
            return
        for venta in ventas:
            print("ID Venta: {}, Total Venta: {}".format(venta[0], venta[1]))
    
    @staticmethod
    def agregar_nota_credito():
        if usuario_actual is None:
            print("No se ha iniciado sesión como cajero.")
            return

        Acciones.obtener_ventas()

        id_venta = input("Ingrese el ID de la venta para emitir la nota de crédito: ")
        cursor.execute("SELECT total_venta FROM venta WHERE id_venta = %s", (id_venta,))
        venta_existente = cursor.fetchone()
        if venta_existente is None:
            print("La venta con el ID {} no existe.".format(id_venta))
            return

        tipo_documento = input("Ingrese el tipo de documento (Boleta/Factura): ")
        if tipo_documento.lower() not in ['boleta', 'factura']:
            print("Tipo de documento inválido.")
            return

        monto_devuelto = float(input("Ingrese el monto devuelto al cliente: "))

        total_venta = venta_existente[0] 

        if monto_devuelto > total_venta:
            print("El monto devuelto no puede ser mayor al total de la venta.")
            return

        total_venta -= monto_devuelto 

        cursor.execute("UPDATE venta SET monto_devuelto = %s WHERE id_venta = %s", (monto_devuelto, id_venta))
        conexion.commit()

        print("Monto devuelto: {:.2f}".format(monto_devuelto))
        print("Total de la venta después del descuento: {}".format(total_venta))

        print("Nota de crédito emitida exitosamente.")


class Menus:
    @staticmethod
    def menu_vendedor():
        acciones = Acciones()  
        while True:
            opcion = input(
                """
#######################
#                     #
#   Menú de vendedor  #
#                     #
#######################
#                     #
# 1.- Crear venta     #
#                     #
# 0.- Cerrar sesión   #
#                     #
#######################
Opción: """
            )
            if opcion == "1":
                acciones.agregar_venta() 

            elif opcion == "0":
                print("Sesión cerrada. ¡Hasta luego!")
                break
            else:
                print(novalido)

    @staticmethod
    def menu_jefe():
        while True:
            opcion = input(
                """
#######################################
#                                     #
# Menú de jefe de ventas              #
#                                     #
#######################################
#                                     #
# ¿Qué desea hacer?                   #
# - Productos:                        #
# 1.- Agregar productos al inventario #
# 2.- Ver productos en inventario     #
# 3.- Actualizar un producto          #
# 4.- Quitar productos del inventario #
# - Ventas:                           #
# 5.- Obtener las ventas              #
# 6.- Actualizar una venta            #
# 7.- Borrar una venta                #
# - Día:                              #
# 8.- Cerrar día de ventas            #
# 9.- Abrir día de ventas             #
#                                     #
# 0.- Cerrar sesión                   #
#                                     #
#######################################
Opción: """
            )
            if opcion == "1":
                Acciones.agregar_producto()
            elif opcion == "2":
                Acciones.obtener_productos()
            elif opcion == "3":
                Acciones.actualizar_producto()
            elif opcion == "4":
                Acciones.quitar_producto()
            elif opcion == "5":
                Acciones.obtener_ventas()
            elif opcion == "6":
                Acciones.actualizar_ventas()
            elif opcion == "7":
                Acciones.eliminar_venta()
            elif opcion == "8":
                Acciones.cerrar_dia_ventas()
            elif opcion == "9":
                Acciones.abrir_dia_ventas()
            elif opcion == "0":
                print("Sesión cerrada. ¡Hasta luego!")
                break
            else:
                print(novalido)

    @staticmethod
    def menu_cajero():
        while True:
            opcion = input(
                """
#######################################
#                                     #
# Menú de cajero                      #
#                                     #
#######################################
#                                     #
# ¿Qué desea hacer?                   #
# 1.- Emitir nota de crédito          #
# 0.- Cerrar sesión                   #
#                                     #
#######################################
Opción: """
            )
            if opcion == "1":
                Acciones.agregar_nota_credito()
            elif opcion == "0":
                print("Sesión cerrada. ¡Hasta luego!")
                break
            else:
                print(novalido)

# Inicio del programa
cursor = conexion.cursor()

while True:
    opcion = input(
        """
###################################
#                                 #
# Bienvenido al sistema de ventas #
#                                 #
###################################
#                                 #
# 1.- Iniciar sesión              #
#                                 #
# 0.- Cerrar programa             #
#                                 #
###################################
Opción: """
    )

    if opcion == "1":
        Acciones.iniciar_sesion()
    elif opcion == "0":
        print("Adiós.")
        break
    else:
        print(novalido)

conexion.close()
